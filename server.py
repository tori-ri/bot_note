import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from config import BOT_TOKEN
from models.db import init_db, SessionLocal, User, Note, Reminder, ScheduleEntry
from datetime import datetime


async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data
    chat_id = data["chat_id"]
    title = data["title"]
    message = data["message"]
    text = f"‚è∞ *{title}*\n{message}"
    await context.bot.send_message(chat_id=chat_id, text=text, parse_mode="Markdown")


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_user = update.message.from_user
    text = update.message.text

    note_stage = context.user_data.get("add_note_stage")
    rem_stage = context.user_data.get("add_reminder_stage")

    sched_stage = context.user_data.get("sched_stage")

    if sched_stage == "title_add":
        context.user_data["sched_title"] = text
        context.user_data["sched_stage"] = "time_add"
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM):")
        return

    if sched_stage == "time_add":
        day = context.user_data["sched_chosen_day"]
        title = context.user_data["sched_title"]
        time_ = text

        session = SessionLocal()
        user = session.query(User).filter_by(telegram_id=telegram_user.id).first()
        entry = ScheduleEntry(user_id=user.id, day=day, title=title, time=time_)
        session.add(entry)
        session.commit()
        session.close()

        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {day} ‚Äî {time_} {title}")
        context.user_data.clear()
        return

    if note_stage == "title":
        context.user_data["note_title"] = text
        context.user_data["add_note_stage"] = "content"
        await update.message.reply_text("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:")
        return

    if note_stage == "content":
        title = context.user_data.get("note_title")
        content = text

        session = SessionLocal()
        user = session.query(User).filter_by(telegram_id=telegram_user.id).first()
        if not user:
            await update.message.reply_text("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
            session.close()
            context.user_data.clear()
            return

        note = Note(title=title, content=content, user=user)
        session.add(note)
        session.commit()
        session.close()

        await update.message.reply_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        context.user_data.clear()
        return

    if rem_stage == "title":
        context.user_data["reminder_title"] = text
        context.user_data["add_reminder_stage"] = "message"
        await update.message.reply_text("‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        return

    if rem_stage == "message":
        context.user_data["reminder_message"] = text
        context.user_data["add_reminder_stage"] = "time"
        await update.message.reply_text("‚è∞ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM)")
        return

    if rem_stage == "time":
        try:
            reminder_time = datetime.strptime(text, "%Y-%m-%d %H:%M")
        except ValueError:
            await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π: YYYY-MM-DD HH:MM")
            return

        title = context.user_data["reminder_title"]
        message = context.user_data["reminder_message"]

        session = SessionLocal()
        user = session.query(User).filter_by(telegram_id=telegram_user.id).first()
        if not user:
            await update.message.reply_text("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
            session.close()
            context.user_data.clear()
            return

        rem = Reminder(title=title, message=message, reminder_time=reminder_time, user=user)
        session.add(rem)
        session.commit()

        rem_id = rem.id
        chat_id = user.telegram_id

        session.close()

        await update.message.reply_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time.strftime('%Y-%m-%d %H:%M')}."
        )

        now = datetime.now()
        delay = (reminder_time - now).total_seconds()
        if delay > 0:
            context.application.job_queue.run_once(
                callback=send_reminder,
                when=delay,
                data={"chat_id": chat_id, "title": title, "message": message},
                name=f"reminder_{rem_id}")
        else:
            await send_reminder(context)

        context.user_data.clear()
        return

    await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É¬ª).")


async def send_main_menu(chat_or_message, context: ContextTypes.DEFAULT_TYPE):
    telegram_user = chat_or_message.from_user
    session = SessionLocal()

    try:
        user = session.query(User).filter_by(telegram_id=telegram_user.id).first()
        if not user:
            user = User(
                telegram_id=telegram_user.id,
                username=telegram_user.username
            )
            session.add(user)
            session.commit()
            logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {telegram_user.id}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        session.rollback()
    finally:
        session.close()

    keyboard = [
        [InlineKeyboardButton("üìì –ó–∞–º–µ—Ç–∫–∏", callback_data="notes")],
        [InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminders")],
        [InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="shedules")],
        [InlineKeyboardButton("üñº –ì–ª–∞–≤–Ω–æ–µ", callback_data="main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    caption = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ:\n"
        "üìì –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏\n"
        "‚è∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n"
        "–í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å:"
    )

    with open("images/main.png", "rb") as photo:
        await chat_or_message.reply_photo(photo=photo, caption=caption, reply_markup=reply_markup)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_main_menu(update.message, context)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "main":
        await query.message.delete()
        await send_main_menu(query.message, context)


    elif query.data == "notes":
        await query.message.delete()
        note_keyboard = [
            [InlineKeyboardButton("‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_note")],
            [InlineKeyboardButton("üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="view_notes")],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="delete_note")],
            [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="export_notes")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main")]]
        with open("images/notes.png", "rb") as img:
            await query.message.reply_photo(
                photo=img,
                caption="üìì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏:\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
                reply_markup=InlineKeyboardMarkup(note_keyboard))

    elif query.data == "view_notes":
        session = SessionLocal()
        user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
        notes = user.notes if user else []
        session.close()

        if not notes:
            await query.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        else:
            text = "\n\n".join([f"üìù *{n.title}*\n{n.content}" for n in notes])
            await query.message.reply_markdown(text[:4000])

    elif query.data == "add_note":
        context.user_data["add_note_stage"] = "title"
        await query.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏:")

    elif query.data == "delete_note":
        session = SessionLocal()
        user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
        notes = user.notes if user else []
        session.close()

        if not notes:
            await query.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        else:
            buttons = [[InlineKeyboardButton(n.title, callback_data=f"delete_note_{n.id}")] for n in notes]
            buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notes")])
            await query.message.reply_text("–í—ã–±–µ—Ä–∏ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(buttons))

    elif query.data.startswith("delete_note_"):
        note_id = int(query.data.split("_")[-1])
        session = SessionLocal()
        note = session.query(Note).filter_by(id=note_id).first()
        if note:
            session.delete(note)
            session.commit()
            await query.message.reply_text("‚ùå –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await query.message.reply_text("‚ùó –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        session.close()

    elif query.data == "export_notes":
        session = SessionLocal()
        user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
        notes = user.notes if user else []
        session.close()

        if not notes:
            await query.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        else:
            file_name = "notes_export.txt"
            with open(file_name, "w", encoding="utf-8") as f:
                for note in notes:
                    f.write(f"üìù {note.title}\n{note.content}\n\n")

            with open(file_name, "rb") as file:
                await query.message.reply_document(
                    document=file,
                    caption="–í–æ—Ç —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt.")
    elif query.data == "reminders":
        await query.message.delete()

        reminder_keyboard = [
            [InlineKeyboardButton("‚è∞ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="add_reminder")],
            [InlineKeyboardButton("üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="view_reminders")],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="delete_reminder")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main")]]

        with open("images/remind.png", "rb") as img:
            await query.message.reply_photo(
                photo=img,
                caption="‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
                reply_markup=InlineKeyboardMarkup(reminder_keyboard))
    elif query.data == "add_reminder":
        context.user_data["add_reminder_stage"] = "title"
        await query.message.reply_text("‚è∞ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")

    elif query.data == "view_reminders":
        session = SessionLocal()
        user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
        reminders = user.reminders if user else []
        session.close()

        if not reminders:
            await query.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        else:
            reminder_text = "\n\n".join([f"‚è∞ *{r.title}*\n{r.message}\n{r.reminder_time}" for r in reminders])
            await query.message.reply_markdown(reminder_text[:4000])
    elif query.data == "delete_reminder":
        session = SessionLocal()
        user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
        reminders = user.reminders if user else []
        session.close()

        if not reminders:
            await query.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        else:
            buttons = [[InlineKeyboardButton(r.title, callback_data=f"delete_reminder_{r.id}")] for r in reminders]
            buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reminders")])
            await query.message.reply_text("–í—ã–±–µ—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                           reply_markup=InlineKeyboardMarkup(buttons))

    elif query.data.startswith("delete_reminder_"):
        reminder_id = int(query.data.split("_")[-1])
        session = SessionLocal()
        reminder = session.query(Reminder).filter_by(id=reminder_id).first()
        if reminder:
            session.delete(reminder)
            session.commit()
            await query.message.reply_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await query.message.reply_text("‚ùó –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        session.close()

    elif query.data == "shedules":
        await query.message.delete()
        schedule_kb = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="add_sched")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="del_sched")],
            [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="view_sched")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main")]]

        with open("images/shedules.png", "rb") as img:
            await query.message.reply_photo(
                photo=img,
                caption="üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
                reply_markup=InlineKeyboardMarkup(schedule_kb))

    elif query.data == "add_sched":
        context.user_data["sched_stage"] = "day_add"
        days = ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(d, callback_data=f"sched_day_{d}")] for d in days])
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=kb)

    elif query.data.startswith("sched_day_") and context.user_data.get("sched_stage") == "day_add":
        day = query.data.split("_")[-1]
        context.user_data["sched_chosen_day"] = day
        context.user_data["sched_stage"] = "title_add"
        await query.message.reply_text(f"–î–µ–Ω—å: {day}\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞:")

    elif context.user_data.get("sched_stage") == "title_add" and query.data is None:
        pass

    elif query.data == "del_sched":
        context.user_data["sched_stage"] = "day_del"
        days = ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(d, callback_data=f"del_day_{d}")] for d in days])
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

    elif query.data.startswith("del_day_") and context.user_data.get("sched_stage") == "day_del":
        day = query.data.split("_")[-1]
        context.user_data["sched_chosen_day"] = day
        session = SessionLocal()
        user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
        entries = session.query(ScheduleEntry).filter_by(user_id=user.id, day=day).all()
        session.close()
        if not entries:
            await query.message.reply_text("–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –¥–µ–ª.")
            context.user_data.clear()
            return
        buttons = []
        text = f"–î–µ–ª–∞ –≤ {day}:\n"
        for i, e in enumerate(entries, start=1):
            text += f"{i}. {e.time} ‚Äî {e.title}\n"
            buttons.append([InlineKeyboardButton(str(i), callback_data=f"del_entry_{i}")])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="shedules")])
        context.user_data["sched_entries"] = entries
        context.user_data["sched_stage"] = "entry_del"
        await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(buttons))

    elif query.data.startswith("del_entry_") and context.user_data.get("sched_stage") == "entry_del":
        idx = int(query.data.split("_")[-1]) - 1
        entries = context.user_data["sched_entries"]
        if 0 <= idx < len(entries):
            session = SessionLocal()
            session.delete(entries[idx])
            session.commit()
            session.close()
            await query.message.reply_text("üóë –î–µ–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await query.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        context.user_data.clear()

    elif query.data == "view_sched":
        session = SessionLocal()
        user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
        days = ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]
        text = "üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
        for d in days:
            entries = session.query(ScheduleEntry).filter_by(user_id=user.id, day=d).order_by(ScheduleEntry.time).all()
            if entries:
                text += f"\n<b>{d}</b>\n"
                for e in entries:
                    text += f"‚Ä¢ {e.time} ‚Äî {e.title}\n"
        session.close()
        await query.message.reply_text(text, parse_mode="HTML")
        context.user_data.clear()


def main():
    init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    session = SessionLocal()
    now = datetime.now()
    entries = session.query(Reminder).filter(Reminder.reminder_time > now).all()
    for r in entries:
        rem_id = r.id
        chat_id = r.user.telegram_id
        title = r.title
        message = r.message
        remind_time = r.reminder_time

        delay = (remind_time - now).total_seconds()
        if delay > 0:
            app.job_queue.run_once(
                callback=send_reminder,
                when=delay,
                data={"chat_id": chat_id, "title": title, "message": message},
                name=f"reminder_{rem_id}"
            )
    session.close()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    app.run_polling()

if __name__ == "__main__":
    main()
